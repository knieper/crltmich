<?php  
// $Id$

/**		
 * @file
 * Contains theme override functions and preprocess functions for the theme.
 *
 * ABOUT THE TEMPLATE.PHP FILE
 *
 *   The template.php file is one of the most useful files when creating or
 *   modifying Drupal themes. You can add new regions for block content, modify
 *   or override Drupal's theme functions, intercept or make additional
 *   variables available to your theme, and create custom PHP logic. For more
 *   information, please visit the Theme Developer's Guide on Drupal.org:
 *   http://drupal.org/theme-guide
 *
 * OVERRIDING THEME FUNCTIONS
 *
 *   The Drupal theme system uses special theme functions to generate HTML
 *   output automatically. Often we wish to customize this HTML output. To do
 *   this, we have to override the theme function. You have to first find the
 *   theme function that generates the output, and then "catch" it and modify it
 *   here. The easiest way to do it is to copy the original function in its
 *   entirety and paste it here, changing the prefix from theme_ to city_magazine_custom_.
 *   For example:
 *
 *     original: theme_breadcrumb()
 *     theme override: city_magazine_custom_breadcrumb()
 *
 *   where city_magazine_custom is the name of your sub-theme.
 *
 *   If you would like to override any of the theme functions used in city_magazine core,
 *   you should first look at how Comaco core implements those functions:
 *     theme_breadcrumbs()      in city_magazine/template.php
 *     theme_menu_item_link()   in city_magazine/template.php
 *     theme_menu_local_tasks() in city_magazine/template.php
 *
 *   For more information, please visit the Theme Developer's Guide on
 *   Drupal.org: http://drupal.org/node/173880
 *
 * CREATE OR MODIFY VARIABLES FOR YOUR THEME
 *
 *   Each tpl.php template file has several variables which hold various pieces
 *   of content. You can modify those variables (or add new ones) before they
 *   are used in the template files by using preprocess functions.
 *
 *   This makes THEME_preprocess_HOOK() functions the most powerful functions
 *   available to themers.
 *
 *   It works by having one preprocess function for each template file or its
 *   derivatives (called template suggestions). For example:
 *     THEME_preprocess_page    alters the variables for page.tpl.php
 *     THEME_preprocess_node    alters the variables for node.tpl.php or
 *                              for node-forum.tpl.php
 *     THEME_preprocess_comment alters the variables for comment.tpl.php
 *     THEME_preprocess_block   alters the variables for block.tpl.php
 *
 *   For more information on preprocess functions and template suggestions,
 *   please visit the Theme Developer's Guide on Drupal.org:
 *   http://drupal.org/node/223440
 *   and http://drupal.org/node/190815#template-suggestions
 */


/*
 * Add any conditional stylesheets you will need for this sub-theme.
 *
 * To add stylesheets that ALWAYS need to be included, you should add them to
 * your .info file instead. Only use this section if you are including
 * stylesheets based on certain conditions.
 */


/**
 * Implementation of HOOK_theme().
 */
function city_magazine_custom(&$existing, $type, $theme, $path) {
  $hooks = city_magazine($existing, $type, $theme, $path);
  // Add your theme hooks like this:
  /*
  $hooks['hook_name_here'] = array( // Details go here );
  */
  // @TODO: Needs detailed comments. Patches welcome!
  return $hooks;
}

/**
 * Override or insert variables into all templates.
 *
 * @param $vars
 *   An array of variables to pass to the theme template.
 * @param $hook
 *   The name of the template being rendered (name of the .tpl.php file.)
 */
/* -- Delete this line if you want to use this function
function city_magazine_custom_preprocess(&$vars, $hook) {
  $vars['sample_variable'] = t('Lorem ipsum.');
}
// */

/**
 * Override or insert variables into the page templates.
 *
 * @param $vars
 *   An array of variables to pass to the theme template.
 * @param $hook
 *   The name of the template being rendered ("page" in this case.)
 */
/* -- Delete this line if you want to use this function
function city_magazine_custom_preprocess_page(&$vars, $hook) {
  $vars['sample_variable'] = t('Lorem ipsum.');
}
// */

/**
 * Override or insert variables into the node templates.
 *
 * @param $vars
 *   An array of variables to pass to the theme template.
 * @param $hook
 *   The name of the template being rendered ("node" in this case.)
 */
/* -- Delete this line if you want to use this function
function city_magazine_custom_preprocess_node(&$vars, $hook) {
  $vars['sample_variable'] = t('Lorem ipsum.');
}
// */

/**
 * Override or insert variables into the comment templates.
 *
 * @param $vars
 *   An array of variables to pass to the theme template.
 * @param $hook
 *   The name of the template being rendered ("comment" in this case.)
 */
/* -- Delete this line if you want to use this function
function city_magazine_custom_preprocess_comment(&$vars, $hook) {
  $vars['sample_variable'] = t('Lorem ipsum.');
}
// */

/** 
 * Override or insert variables into the block templates.
 *
 * @param $vars
 *   An array of variables to pass to the theme template.
 * @param $hook
 *   The name of the template being rendered ("block" in this case.)
 */
 /* -- Delete this line if you want to use this function
function city_magazine_custom_preprocess_block(&$vars, $hook) {
  $vars['sample_variable'] = t('Lorem ipsum.');
}
// */

function phptemplate_signup_user_form($node) {
  global $user;
  $form = array();
  if (variable_get('signup_ignore_default_fields', 0)) {
    return $form;
  }
  // If this function is providing any extra fields at all, the following
  // line is required for form form to work -- DO NOT EDIT OR REMOVE.
  $form['signup_form_data']['#tree'] = TRUE;

  /*if (in_array('admin', $user->roles)) {
    drupal_set_message('<pre>' . print_r($node->webform, true) . '</pre>');
    drupal_set_message('<pre>' . print_r($node, true) . '</pre>');
  }*/

  // We do not want to modify signup user forms created before the new
  // profile field and webform component field implementations were added
  // to the form.
  //if ($node->nid >= 58805) {

  // Place user profile fields on the form. (except the fmp id, and gtc badges field). If we're
  // editing a signup, use the account of the user on the signup. If we're on the
  // admin signup form, set the account to false so the profile fields won't be
  // populated with the admin's data.
  $account = null;
  if (arg(0) == 'signup' && arg(1) == 'edit' && is_numeric(arg(2))) {
    $sql = "SELECT uid FROM signup_log WHERE sid = %d";
    $uid = db_result(db_query($sql, arg(2)));
    if ($uid) {
      $account = user_load($uid);
    }
  } 
  else if (arg(0) == 'node' && arg(2) == 'signups' && arg(3) == 'add') {
    $account = false;
  }
  $sql = "SELECT * FROM {profile_fields} WHERE fid <> 1 AND fid <> 9 ORDER BY weight ASC ";
  $elements = crlt_generate_user_profile_field_form_elements($sql, $account);
  foreach($elements as $name => $element) {
    if ($name == 'institution') { continue; }
    $form['signup_form_data'][$name] = $element; 
  }

  // If there are any webform components attached to this node, place the
  // components on the signup form. 
  if (isset($node->webform) && !empty($node->webform['components'])) {
    foreach($node->webform['components'] as $cid => $component) {
      $element = null;
      if ($component['type'] == 'markup') {
        $title = $component['name'] ? '<h4>' . $component['name']  . '</h4>' : '';
        $element = array(
          '#value' => $title . $component['value']
        );
      }
      else {
        $type = $component['type'];
        if ($type == 'select') {
          $type = 'checkboxes';
          if (isset($component['extra']['aslist']) && $component['extra']['aslist'] == 1) {
            $type = 'select';
          }
          else if (!$component['extra']['multiple']) {
            $type = 'radios'; 
          }
        }
        $element = array(
          '#title' => $component['name'],
          '#type' => $type,
          '#required' => $component['mandatory'] ? TRUE: FALSE,
          '#default_value' => $component['value'] 
        );
      }
      // Add options to the element if necessary. The options are stored
      // as items separated by key|label and by new lines.
      if (isset($component['extra']['items'])) {
        $element['#options'] = array();
        foreach(preg_split("/((\r?\n)|(\r\n?))/", $component['extra']['items']) as $item){
          $parts = explode('|', $item);
          if (sizeof($parts) != 2) { continue; }
          $key = $parts[0];
          $value = $parts[1];
          $element['#options'][$key] = $value;
        } 
      }
      $form['signup_form_data'][$component['form_key']] = $element;
    }
  }

  // Comments.
  $form['signup_form_data']['comments'] = array(
    '#type' => 'textarea',
    '#title' => t('Comments'),
    '#wysiwyg' => false,
  );

  return $form;

  //} // Closure to if statement deciding node id cut off point.

















  /*
  $form['signup_form_data']['Phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Phone'),
    '#size' => 40, '#maxlength' => 64,
  );
  */

  //// Begin custom fields
  $form['signup_form_data']['HSunit'] = array(
    '#type' => 'select',
    '#title' => t('Unit'),
    '#options' => $options,
  );

  // Get uniqname
  $form['signup_form_data']['Name'] = array(
    '#type' => 'hidden',
    /*
    '#type' => 'textfield',
    */
    '#title' => t('Uniqname'),
    '#size' => 10, '#maxlength' => 20,
    /*
    '#required' => TRUE,
    */
  );

  $options = array();
  $options['no choice'] = '- Please choose -';
  $options['Faculty'] = 'Faculty';
  $options['Graduate Student'] = 'Graduate Student';
  $options['Postdoc'] = 'Postdoc';
  $options['Staff'] = 'Staff';
  $form['signup_form_data']['status'] = array(
    '#type' => 'select',
    '#title' => t('Primary Appointment'),
    '#options' => $options,
  );

  $options = array();
  $options['no choice'] = '- Please choose -';
	$options['236'] = 'Administration';
	$options['342'] = 'Architecture and Urban Planning';
	$options['364'] = 'Art & Design';
	$options['343'] = 'Business';
	$options['344'] = 'Dentistry';
	$options['345'] = 'Education';
	$options['240'] = 'Engineering';
	$options['362'] = 'External';
	$options['347'] = 'Information';
	$options['348'] = 'Kinesiology';
	$options['349'] = 'Law';
	$options['366'] = 'Libraries (UM)';
	$options['253'] = 'LSA';
	$options['350'] = 'Medical School';
	$options['351'] = 'Music, Theatre & Dance';
	$options['358'] = 'Natural Resources and Environment';
	$options['352'] = 'Nursing';
	$options['353'] = 'Officer Education';
	$options['354'] = 'Pharmacy';
	$options['355'] = 'Public Health';
	$options['356'] = 'Public Policy';
	$options['365'] = 'Rackham Admin (NO GSIs)';
	$options['357'] = 'Social Work';
	$options['359'] = 'U-M Dearborn';
	$options['360'] = 'U-M Flint';
	$options['361'] = 'Other';
  $form['signup_form_data']['unit'] = array(
    '#type' => 'select',
    '#title' => t('Unit'),
    '#options' => $options,
  );

  $options = array();
  $options['no choice'] = '- Choose one, if in Administration, LS&A or Engineering -';
	$options['243'] = 'Administration - Admissions';
	$options['237'] = 'Administration - Career Center';
	$options['238'] = 'Administration - Communications';
	$options['244'] = 'Administration - HR';
	$options['245'] = 'Administration - NCID';
	$options['246'] = 'Administration - Office of New Student Programs';
	$options['247'] = 'Administration - Office of the President';
	$options['248'] = 'Administration - OVPR';
	$options['249'] = 'Administration - Provost Office';
	$options['250'] = 'Administration - Public Goods Council';
	$options['251'] = 'Administration - Student Affairs';
	$options['241'] = 'Engineering - Climate and Space Sciences and Engineering';
	$options['242'] = 'Engineering - Applied Physics';
	$options['252'] = 'Engineering - Atmospheric, Oceanic & Space Sciences (AOSS)';
	$options['254'] = 'Engineering - Biomedical Engineering';
	$options['255'] = 'Engineering - Chemical Engineering';
	$options['256'] = 'Engineering - Civil and Environmental Engineering';
	$options['257'] = 'Engineering - Electric Engineering and Computer Science';
	$options['258'] = 'Engineering - Engineering Graduate Education';
	$options['259'] = 'Engineering - Industrial and Operations Engineering';
	$options['260'] = 'Engineering - InterPro';
	$options['261'] = 'Engineering - Macromolecular Sci & Engr';
	$options['262'] = 'Engineering - Materials Science and Engineering';
	$options['263'] = 'Engineering - Mechanical Engineering';
	$options['264'] = 'Engineering - Naval Architecture and Marine Engineering';
	$options['265'] = 'Engineering - Nuclear Engineering and Radiological Sciences';
	$options['266'] = 'Engineering - Technical Communication';
	$options['267'] = 'LSA - Afroamerican and African Studies';
	$options['268'] = 'LSA - American Culture';
	$options['269'] = 'LSA - Anthropology';
	$options['367'] = 'LSA - Applied Physica';
	$options['271'] = 'LSA - Armenian Studies Program';
	$options['272'] = 'LSA - Asian Languages and Cultures';
	$options['273'] = 'LSA - Astronomy';
	$options['274'] = 'LSA - Biology';
	$options['275'] = 'LSA - Biophysics';
	$options['276'] = 'LSA - Chemistry';
	$options['277'] = 'LSA - Chinese Studies';
	$options['278'] = 'LSA - Classic Art and Archaeology (IPCAA)';
	$options['279'] = 'LSA - Classical Studies';
	$options['280'] = 'LSA - Communication Studies';
	$options['281'] = 'LSA - Comparative Literature';
	$options['283'] = 'LSA - Complex Systems';
	$options['284'] = 'LSA - Comprehensive Studies';
	$options['285'] = 'LSA - Computer Science';
	$options['286'] = 'LSA - Dean\'s Office';
	$options['287'] = 'LSA - Earth and Environmental Sciences';
	$options['288'] = 'LSA - Ecology and Evolutionary Biology';
	$options['289'] = 'LSA - Economics';
	$options['290'] = 'LSA - English Language and Literature';
	$options['291'] = 'LSA - English Language Institute';
	$options['292'] = 'LSA - Environmental Health Sciences';
	$options['293'] = 'LSA - European Studies';
	$options['294'] = 'LSA - General Studies';
	$options['295'] = 'LSA - Germanic Languages and Literatures';
	$options['296'] = 'LSA - Great Books';
	$options['297'] = 'LSA - Health Science Scholars Program';
	$options['298'] = 'LSA - History';
	$options['299'] = 'LSA - History of Art';
	$options['300'] = 'LSA - Institute for the Humanities';
	$options['301'] = 'LSA - International and Comparative Studies';
	$options['302'] = 'LSA - International Institute';
	$options['303'] = 'LSA - Japanese Studies';
	$options['304'] = 'LSA - Judaic Studies';
	$options['305'] = 'LSA - Korean Studies';
	$options['306'] = 'LSA - Language Resource Center';
	$options['307'] = 'LSA - Latin American and Caribbean Studies';
	$options['308'] = 'LSA - Linguistics';
	$options['309'] = 'LSA - Lloyd Hall Scholars';
	$options['310'] = 'LSA - LSA Advising Center';
	$options['311'] = 'LSA - LSA ISS';
	$options['312'] = 'LSA - Mathematics';
	$options['313'] = 'LSA - Michigan Community Scholars Program (MCSP)';
	$options['314'] = 'LSA - Middle Eastern and North African Studies';
	$options['315'] = 'LSA - Molecular, Cellular, and Developmental Biology';
	$options['316'] = 'LSA - Museum of Archaeology';
	$options['317'] = 'LSA - Museum of Paleontology';
	$options['318'] = 'LSA - Museum of Zoology';
	$options['319'] = 'LSA - Naval Officer Education Program';
	$options['320'] = 'LSA - Near Eastern Studies';
	$options['321'] = 'LSA - Neuroscience';
	$options['322'] = 'LSA - Office of International Programs (OIP)';
	$options['323'] = 'LSA - Organizational Studies';
	$options['324'] = 'LSA - Philosophy';
	$options['325'] = 'LSA - Physics';
	$options['326'] = 'LSA - Political Science';
	$options['327'] = 'LSA - Program in the Environment (PITE)';
	$options['328'] = 'LSA - Program on Intergroup Relations (IGR)';
	$options['329'] = 'LSA - Psychology';
	$options['330'] = 'LSA - Residential College';
	$options['331'] = 'LSA - Romance Languages and Literatures';
	$options['332'] = 'LSA - Russian and East European Studies';
	$options['333'] = 'LSA - Science Learning Center';
	$options['334'] = 'LSA - Screen Arts and Cultures';
	$options['335'] = 'LSA - Slavic Languages and Literatures';
	$options['336'] = 'LSA - Sociology';
	$options['337'] = 'LSA - South and Southeast Asian Studies';
	$options['338'] = 'LSA - Statistics';
	$options['339'] = 'LSA - Sweetland Writing Center';
	$options['340'] = 'LSA - UROP';
	$options['341'] = 'LSA - Women\'s Studies';
  $form['signup_form_data']['dept'] = array(
    '#type' => 'select',
    '#title' => t('Department'),
    '#options' => $options,
  );

  $form['signup_form_data']['regfirstname'] = array(
    '#type' => 'textfield',
    '#title' => t('First Name'),
    '#size' => 40, '#maxlength' => 64,
    '#required' => TRUE,
  );

  $form['signup_form_data']['reglastname'] = array(
    '#type' => 'textfield',
    '#title' => t('Last Name'),
    '#size' => 40, '#maxlength' => 64,
    '#required' => TRUE,
  );
  
  $options = array();
  $options['no choice'] = '- Please choose -';
  $options['M+Box'] = 'M+Box';
  $options['Blogger'] = 'Blogger';
  $options['Google Docs'] = 'Google Docs';
  $options['Piazza'] = 'Piazza';
  $form['signup_form_data']['techoption'] = array(
    '#type' => 'select',
    '#title' => t('Which of the following technologies do you MOST want to use in your teaching?'),
    '#options' => $options,
  );

  $form['signup_form_data']['useplan'] = array(
    '#type' => 'textarea',
    '#title' => t('How do you want to use this technology in your teaching?'),
    '#wysiwyg' => false,
  );

  $form['signup_form_data']['learningneed'] = array(
    '#type' => 'textarea',
    '#title' => t('What do you need to learn to help you take the next step?'),
    '#wysiwyg' => false,
  );

  $form['signup_form_data']['comments'] = array(
    '#type' => 'textarea',
    '#title' => t('Comments'),
    '#wysiwyg' => false,
  );
  // End custom fields

  // If the user is logged in, fill in their name by default.
  if ($user->uid) {
    $form['signup_form_data']['Name']['#default_value'] = $user->name;
  }

  return $form;
}

function city_magazine_custom_preprocess_page(&$variables) {
  if($variables['node']->type != "") {
    $variables['template_files'][] = 'page-node-' . $variables['node']->type;
  }


}
