<?php
/**
 * @file
 * Node Subpages
 *
 * Handles the subpages for Issue and State nodes, like Our Priorities, Laws, etc.
 */

/**
 * Return a list of sub-pages
 * Possible fields:
 *    title: required
 *    field: name of CCK field, optional
 *    view: name of a view, optional
 *    view_display: name of the display to use in the view. Optional, but only specify if view is used
 */
function node_subpages_list() {
  $subpages = module_invoke_all('node_subpages_list');
  if (empty($subpages)) {
    $subpages = array();
  }
  return $subpages;
}


/**
 * Implementation of hook_node_subpages_list().
 * 
 * Load subpages that have been setup through the admin
 */
function node_subpages_node_subpages_list() {
  $subpages = array();
  $result = db_query('SELECT * FROM {node_subpages} ORDER BY weight');
  while ($row = db_fetch_object($result)) {
    $subpages[$row->node_type][$row->subpath] = _node_subpages_prep_details($row);
  }
  
  // Make sure that the default_view_page key is set on all subpages
  foreach ($subpages as $content_type => $subpages_for_type) {
    foreach ($subpages_for_type as $path => $subpage_detail) {
      if (!isset($subpage_detail['default_view_page'])) {
        $subpages[$content_type][$path]['default_view_page'] = FALSE;
      }
    }
  }
  
  return $subpages;
}


/**
 * Load a specific subpage by id from the node_subpages table. Calls
 * _node_subpages_prep_details() to prep the information
 */
function node_subpages_load_specific($id) {
  $result = db_query('SELECT * FROM {node_subpages} WHERE id=%d', $id);
  $row = db_fetch_object($result);
  if ($row) {
    return _node_subpages_prep_details($row);
  }
  return NULL;
}


/**
 * Given a row object from the node_subpages table, prep an array of details about it
 */
function _node_subpages_prep_details($row) {
  $info = array(
    'title' => $row->title,
    'id' => $row->id,
    'subpath' => $row->subpath,
    'node_type' => $row->node_type,
  );

  // Subpage displays a CCK field
  if ($row->source_type == 'cck') {
    $info['field'] = $row->source_data;
  }
  // Subpage displays a view
  elseif ($row->source_type == 'view') {
    list($view_name, $display_name) = explode(':', $row->source_data);
    $info['view'] = $view_name;
    $info['view_display'] = $display_name;
  }
  return $info;
}

/**
 * Get the subpages for a specific node type
 */
function node_subpages_list_for_type($node_type) {
  static $all;
  if (empty($all)) {
    $all = node_subpages_list();
  }
  
  if (!$all[$node_type]) {
    $all[$node_type] = array();
  }
  return $all[$node_type];
}

/**
 * Implements hook_block().
 */
function node_subpages_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {

    case 'list':
      $blocks[0]['info'] = t('Node Subpages Menu Bar');
      return $blocks;

    case 'view':
      if ($delta == 0) {
        $block['subject'] = '';
        $block['content'] = _node_subpages_menu_bar();
      }
      return $block;
  }
}

function _node_subpages_menu_bar() {
  $current_node = menu_get_object();
  if (empty($current_node)) {
    $current_node = menu_get_object('node_subpage_menu');
  }
  $subpages = node_subpages_list_for_type($current_node->type);
  if (isset($subpages)) {
    $have_default_view_tab = FALSE;
    
    foreach ($subpages as $subpage_path => $details) {
      // Check if there's a field on the node to toggle whether or not this 
      // tab should be shown
      // @todo: CCK fields can't have dashes, but subpage paths can
      $tab_toggle_field = 'field_' . $subpage_path . '_tab_on';
      if ($current_node->$tab_toggle_field) {
        if ($current_node->{$tab_toggle_field}[0]['value'] == 0) {
          continue;
        }
      }
      
      $tab_title = $details['title'];
      
      // Check if there's a field on the node to override the tab title
      $tab_title_field = 'field_' . $subpage_path . '_tab_title';
      if ($current_node->$tab_title_field) {
        if ($current_node->{$tab_title_field}[0]['value']) {
          $tab_title = $current_node->{$tab_title_field}[0]['value'];
        }
      }
      
      // If there's a subpage item for the main View tab, handle it a 
      // little differently
      if ($details['default_view_page']) {
        $have_default_view_tab = TRUE;
        $items[] = array(
          'href' => 'node/' . $current_node->nid,
          'title' => $tab_title,
        );
      }
      // Not the View tab
      else {
        if (node_subpage_menu_access($current_node, $subpage_path)) {
          $items[] = array(
            'href' => 'node/' . $current_node->nid . '/' . $subpage_path,
            'title' => $tab_title,
          );
        }
      }
    }
    
    // Only show subpage links if there are any
    if (!empty($items)) {
      // Make sure that there is a link for the regular node view
      if (!$have_default_view_tab) {
        $view_tab = array(
          'href' => 'node/' . $current_node->nid,
          'title' => t('View'),
        );
        array_unshift($items, $view_tab);
      }
      return theme('links', $items);
    }    
  }
  return '';
}



/**
 * Implements hook_menu().
 * Define the menu paths for node subpages
 */
function node_subpages_menu() {
  $items = array();
  
  // Add menu items for each subpage for each node type
  $node_subpages = node_subpages_list();
  foreach ($node_subpages as $node_type => $subpages) {
    foreach ($subpages as $path => $details) {
      if ($details['default_view_page']) continue;
      $items['node/%node_subpage_menu/' . $path] = array(
        'title callback' => 'node_page_title',
        'title arguments' => array(1),
        'page callback' => 'node_subpages_view',
        'page arguments' => array(1, 2),
        'access callback' => 'node_subpage_menu_access',
        'access arguments' => array(1, 2),
        'type' => MENU_NORMAL_ITEM, 
      );
    }
  }
  
  // Add menu items for the management of the subpages for each node type
  foreach (node_get_types('types', NULL, TRUE) as $type) {
    $type_url_str = str_replace('_', '-', $type->type);
    $items['admin/content/node-type/'. $type_url_str .'/subpages'] = array(
      'title' => 'Subpages',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('node_subpages_admin_list', $type),
      'access arguments' => array('administer content types'),
      'file' => 'node_subpages.admin.inc',
      'type' => MENU_LOCAL_TASK,
      'weight' => 100,
    );
    $items['admin/content/node-type/'. $type_url_str .'/subpages/add'] = array(
      'title' => 'Add Subpage',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('node_subpages_add_subpage', $type),
      'access arguments' => array('administer content types'),
      'file' => 'node_subpages.admin.inc',
      'type' => MENU_LOCAL_TASK,
      'weight' => 100,
    );
    $items['admin/content/node-type/'. $type_url_str .'/subpages/edit'] = array(
      'title' => 'Edit Subpage',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('node_subpages_add_subpage', $type),
      'access arguments' => array('administer content types'),
      'file' => 'node_subpages.admin.inc',
      'type' => MENU_CALLBACK,
      'weight' => 100,
    );
    $items['admin/content/node-type/'. $type_url_str .'/subpages/delete'] = array(
      'title' => 'Delete Subpage',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('node_subpages_delete_subpage', $type),
      'access arguments' => array('administer content types'),
      'file' => 'node_subpages.admin.inc',
      'type' => MENU_CALLBACK,
      'weight' => 100,
    );
  }
  return $items;
}

/**
 * Menu loader callback. Only return a node for node types that have subpages, so that 
 * the menu item isn't valid for other node types.
 */
function node_subpage_menu_load($nid) {
  if (!is_numeric($nid)) {
    return FALSE;
  }
  $node = node_load($nid);
  if (isset($node->type)) {
    $subpages = node_subpages_list_for_type($node->type);
    if (!empty($subpages)) {
      return $node;
    }
  }
  return FALSE;  
}

/**
 * Menu access callback
 */
function node_subpage_menu_access($node, $subpage_path) {
  if (node_access('view', $node)) {
    $subpages = node_subpages_list_for_type($node->type);
    if (!empty($subpages)) {
      if ($subpages[$subpage_path]['field']) {
        // If the subpage is empty, the return value will be FALSE, so return FALSE
        // Otherwise, it has a value, so return TRUE
        return (_node_subpages_get_field_value($node, $subpages[$subpage_path]['field']) !== FALSE);
      }
      // If it's a view, show the tab either way
      elseif ($subpages[$subpage_path]['view']) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Implementation of hook_menu_alter().
 * Change the View local task on nodes to Overview
 */
function node_subpages_menu_alter(&$items) {
  $items['node/%node/view']['title callback'] = '_node_subpages_tab_title';
  $items['node/%node/view']['title arguments'] = array(1);
  unset($items['node/%node/view']['title']);
}

/**
 * Title callback for node/%node/view. For nodes with subpages, use the title set for the view subpage.
 * For all other nodes, return View.
 * This text is used for the View local task menu item
 */
function _node_subpages_tab_title($node) {
  $subpages = node_subpages_list_for_type($node->type);
  if (isset($subpages['view'])) {
    return $subpages['view']['title'];
  }
  else {
    return t('View');
  }
}

/**
 * Page callback for node subpages. If the node has content for the
 * requested sub-page, return that content. If not, redirect to the
 * Overview page.
 */
function node_subpages_view($node, $subpage_path) {
  $subpages = node_subpages_list_for_type($node->type);
  if (isset($subpages[$subpage_path])) {
    _node_subpages_fire_context($node->type, $subpage_path);
    
    // Set the menu trail so that menu items are highlighted correctly
    $item = menu_get_item();
    $item['href'] = 'node/' . $node->nid;
    menu_set_item(NULL, $item);
    
    // Get the subpage content, and if it's set, return it as the page content
    if ($subpages[$subpage_path]['field']) {
      $subpage_content = _node_subpages_get_field_value($node, $subpages[$subpage_path]['field']);
      if ($subpage_content) {
        return $subpage_content;
      }
    }
    elseif ($subpages[$subpage_path]['view']) {
      if ($view = views_get_view($subpages[$subpage_path]['view'])) {
        $output = $view->execute_display($subpages[$subpage_path]['view_display'], array($node->nid));
        
        // If executing a display with a specified display, it will return an
        // array with content and subject keys. Otherwise, it returns a
        // straight array.
        if (is_array($output) && $output['content']) {
          return $output['content'];
        }
        
        // Make sure output isn't null, because that causes problems. Make it
        // an empty string instead.
        if (is_null($output)) {
          $output = '';
        }
        return $output;
      }
    }
    // If the function gets this far, the field had no value, or the view couldn't be retrieved
    // In either case, use the drupal_goto() below to go back to the node overview tab
  }
  
  // Not handled by subpages, so redirect back away from the subpage path
  drupal_goto('node/' . $node->nid);
}




/**
 * Get the value for the given subpage from the given node
 * Returns FALSE if the field is empty on the given node
 */
function _node_subpages_get_field_value(&$node, $field_name) {
  // If the field has a value, display it
  if (isset($node->{$field_name})) {
    $values = array();
    foreach ($node->{$field_name} as $v) {
      if ($v['value']) {
        $clean = check_markup($v['value'], $v['format']);
        if ($clean) {
          $values[] = $clean;
        }
      }
    }
    
    if (!empty($values)) {
      return implode($values);
    }
  }
  
  return FALSE;
}


/**
 * Implementation of hook_nodeapi().
 *
 * Manage URL aliases for the node sub-pages
 */
function node_subpages_nodeapi(&$node, $op, $arg) {
  // Only handle sub-paths for nodes that have them
  $subpages = node_subpages_list_for_type($node->type);
  
  // If there are no subpages for this node type, there is nothing to do here.
  if (!isset($subpages)) {
    return;
  }
  
  // Permissions are required for everything except node loading.
  if (user_access('create url aliases') || user_access('administer url aliases') || ($op == 'load')) {
    $language = isset($node->language) ? $node->language : '';
    switch ($op) {
      case 'insert':
      case 'update':
        if (isset($node->path) && trim($node->path) != '') {
          foreach ($subpages as $sub_path => $title) {
            $actual_path = 'node/'. $node->nid . '/' . $sub_path;
            $alias = $node->path . '/' . $sub_path;
            path_set_alias($actual_path, $alias, NULL, $language);
          }
        }
        break;

      case 'delete':
        $paths_do_delete = array('node/'. $node->nid);
        foreach ($subpages as $sub_path => $title) {
          $paths_do_delete[] = 'node/'. $node->nid . '/' . $sub_path;
        }
        foreach ($paths_do_delete as $path) {
          if (drupal_get_path_alias($path) != $path) {
            path_set_alias($path);
          }
        }
        break;
    }
  }
}

/**
 * Trigger the Context condition for the current subpage
 */
function _node_subpages_fire_context($node_type, $subpage_path) {
  if (module_exists('context')) {
    if ($plugin = context_get_plugin('condition', 'node_subpage')) {
      $plugin->execute($node_type, $subpage_path);
    }
  }
}

/**
 * Implementation of hook_context_registry().
 * Register the Node Subpages condition
 */
function node_subpages_context_registry() {
  $registry = array();
  $registry['conditions'] = array(
    'node_subpage' => array(
      'title' => t('Node Subpages'),
      'description' => t('Set this context when viewing a sub-page on Node nodes. This condition does not apply to the Overview tab; to address that condition, use the regular "Node type" condition.'),
      'plugin' => 'node_subpages_condition_node_subpage',
    ),
  );
  return $registry;
}

/**
 * Implementation of hook_context_plugins().
 * Register the Node Subpages plugin for Contexts
 */
function node_subpages_context_plugins() {
  $plugins['node_subpages_condition_node_subpage'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'node_subpages') .'/context_plugins',
      'file' => 'node_subpages_condition_node_subpage.inc',
      'class' => 'node_subpages_condition_node_subpage',
      'parent' => 'context_condition',
    ),
  );
  return $plugins;
}


/**
 * Implements hook_theme().
 */
function node_subpages_theme($existing, $type, $theme, $path) {
  return array(
    // Theme the subpage list for admins when editing a content type
    'node_subpages_admin_list' => array(
      'file' => 'node_subpages.admin.inc',
    ),
  );
}
